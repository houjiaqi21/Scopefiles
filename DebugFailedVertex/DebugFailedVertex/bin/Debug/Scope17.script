//Script GUID:f462c5ed-ce04-4de5-9545-4132b6ac4be8
//Used for tracking history


adslog =  
    EXTRACT AdId:int,  
            IId:int,  
            Impression:int,  
            IsClicked:int 
    FROM @"/v-hozhao/DebugFailed/AdsLog.txt"   //  /users
    USING DefaultTextExtractor(); 
 
searchlog =  
    EXTRACT IId:int,  
            UId:int,  
            Start:DateTime,  
            Market:string,  
            Query:string,  
            DwellTime:int,  
            Results:string,  
            ClickedUrls:string 
    FROM @"/v-hozhao/DebugFailed/SearchLog_old.txt"   //  /users
    USING DefaultTextExtractor(); 
 
SELECT adslog.AdId AS AdId, 
       adslog.IId AS IId,   
       adslog.Impression AS Impression, 
       searchlog.Query AS Query 
FROM adslog  
INNER JOIN searchlog  
ON adslog.IId == searchlog.IId; 
 
PROCESS  
PRODUCE * 
USING ImpressionProcessor; 
 
OUTPUT  
TO @"/users/v-hozhao/DebugFailed/Impressions.txt"; 
#CS
using Microsoft.SCOPE.Types;
using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using ScopeRuntime;
using ScopeRuntime.Diagnostics;

public class ImpressionProcessor : Processor
{
    /// <summary>
    /// 
    /// </summary>
    /// <param name="columns"></param>
    /// <param name="args"></param>
    /// <param name="input"></param>
    /// <returns></returns>
    public override Schema Produces(string[] columns, string[] args, Schema input)
    {
        return input.Clone();
    }
    /// <summary>
    ///
    /// </summary>
    /// <param name="input"></param>
    /// <param name="output"></param>
    /// <param name="args"></param>
    /// <returns></returns>    
    public override IEnumerable<Row> Process(RowSet input, Row output, string[] args)
    {

        foreach (Row row in input.Rows)
        {
            row.CopyTo(output);
            output[2].Set(10000000 / (row[200].Integer));
            if (row[2].Integer < 10000000)
            {
                DebugStream.WriteLine(String.Format("Impression = {0}", row[2].Integer));
            }
            //output[2].Set(10000000 / (row[2].Integer / 10000000));
            yield return output;
        }
    }
}
#ENDCS

// Generated by ScopeStudio, version 2.7.0000.5
