{"Warning":[{"errorId":"W_CSC_USER_NONDETERMINISTICOPERATION","severity":"Warning","component":"CSC","source":"User","message":"The operation 'TOP' is potentially non-deterministic.","description":"The operation is potentially non-deterministic.","resolution":"Using non-deterministic operations is not a recommended practice.","details":"at token 'TOP', line 25\r\nnear the ###:\r\n**************\r\n  DwellTime : int,\r\n            Results : string,\r\n            ClickedUrls : string\r\n    FROM @\"\/my\/SearchLog.txt\"\r\n    USING DefaultTextExtractor();\r\n\r\nSELECT  ### TOP 100 adslog.AdId AS AdId,\r\n               adslog.IId AS IId,\r\n               adslog.Impression AS Impression,\r\n               searchlog.Query AS Query,\r\n    ","internalDiagnostics":"jobId=, client=HONGHAI-VM2015,   at ScopeCompiler.FrontEnd.ScopeSyntaxVerifier.OnTopSpecification(SyntaxNode input, TopSpecification e)\r\n   at ScopeCompiler.VisitorContext`1.Visit(T node, Action accept)\r\n   at ScopeCompiler.FrontEnd.SyntaxVerifier.Visit(SyntaxNode input, SyntaxNode e)\r\n   at ScopeCompiler.TreeVisitor`2.Visit(P input, IEnumerable`1 nodes)\r\n   at ScopeCompiler.FrontEnd.SyntaxVerifier.OnSelectQuery(SyntaxNode parent, SelectQuery e)\r\n   at ScopeCompiler.FrontEnd.ScopeSyntaxVerifier.OnSelectQuery(SyntaxNode parent, SelectQuery e)\r\n   at ScopeCompiler.VisitorContext`1.Visit(T node, Action accept)\r\n   at ScopeCompiler.FrontEnd.SyntaxVerifier.Visit(SyntaxNode input, SyntaxNode e)\r\n   at ScopeCompiler.TreeVisitor`2.Visit(P input, IEnumerable`1 nodes)\r\n   at ScopeCompiler.FrontEnd.SyntaxVerifier.OnQueryStatement(SyntaxNode parent, QueryStatement e)\r\n   at ScopeCompiler.VisitorContext`1.Visit(T node, Action accept)\r\n   at ScopeCompiler.FrontEnd.SyntaxVerifier.Visit(SyntaxNode input, SyntaxNode e)\r\n   at ScopeCompiler.TreeVisitor`2.Visit(P input, IEnumerable`1 nodes)\r\n   at ScopeCompiler.FrontEnd.SyntaxVerifier.ProcessScript(SyntaxNode parent, Script e)\r\n   at ScopeCompiler.FrontEnd.ScopeSyntaxVerifier.OnScopeScript(SyntaxNode input, ScopeScript e)\r\n   at ScopeCompiler.VisitorContext`1.Visit(T node, Action accept)\r\n   at ScopeCompiler.FrontEnd.SyntaxVerifier.Visit(SyntaxNode input, SyntaxNode e)\r\n   at ScopeCompiler.TreeVisitor`2.Visit(P input, IEnumerable`1 nodes)\r\n   at ScopeCompiler.FrontEnd.SyntaxVerifier.OnBatch(SyntaxNode input, Batch batch)\r\n   at ScopeCompiler.VisitorContext`1.Visit(T node, Action accept)\r\n   at ScopeCompiler.FrontEnd.SyntaxVerifier.Visit(SyntaxNode input, SyntaxNode e)\r\n   at ScopeCompiler.FrontEnd.ScopeSyntaxVerifier.VerifyTree(SyntaxNode root, Script currentScript)\r\n   at ScopeCompiler.FrontEnd.CompilePassHelper.Run(Action pass, Compiler compiler, CompilerTimer timer, Boolean throwOnErrors)\r\n   at ScopeCompiler.FrontEnd.CompileStrategy.SyntaxVerifyPass(SyntaxNode root, Batch batch, DiagnosticCollection diagnostics)\r\n   at ScopeCompiler.FrontEnd.ScopeAstBuilder.BuildAst(NameContext nameContext, Dictionary`2 parameters, DiagnosticCollection diagnostics, CodeObjectDefinition optFunctionDefinition, UInt32 depth, Script[] legacyScripts)\r\n   at ScopeCompiler.FrontEnd.ScopeAstBuilder.BuildAst(Script[] scripts)\r\n   at ScopeCompiler.FrontEnd.BaseAstBuilder.BuildAst(Script legacyScript, String[] scripts)\r\n   at ScopeCompiler.FrontEnd.CompileStrategy.<>c__DisplayClass28_0.<AstBuildingPass>b__0()\r\n   at ScopeCompiler.FrontEnd.CompilePassHelper.Run(Action pass, Compiler compiler, CompilerTimer timer, Boolean throwOnErrors)\r\n   at ScopeCompiler.FrontEnd.CompileStrategy.AstBuildingPass(Script legacyScript, String[] scriptTexts)\r\n   at ScopeCompiler.FrontEnd.ScopeCompileStrategy.AstBuildingPass(Script legacyScript, String[] scriptTexts)\r\n   at ScopeCompiler.FrontEnd.FrontEndRunner.Execute()\r\n   at ScopeCompiler.FrontEnd.CompilePipeline.DoExecutePipeline()\r\n   at ScopeCompiler.FrontEnd.CompilePipeline.DoCompile()\r\n   at ScopeCompiler.FrontEnd.DeepCompilePipeline.DoCompile()\r\n   at ScopeCompiler.FrontEnd.CompilePipeline.CreateContextAndCompile()\r\n   at ScopeCompiler.FrontEnd.CompilePipeline.Execute()\r\n   at ScopeCompiler.Parser.FullParse(String[] scripts, String filePath, CompilerEnvironment environment, Settings settings, Func`4 funcParse, String nebulaCommandLine)\r\n   at ScopeCompiler.Parser.FullParse(String[] scripts, String filePath, CompilerEnvironment environment, Settings settings, String nebulaCommandLine)\r\n   at ScopeClient.Scope.TryToParse(String script, String scriptFileName, Settings compSet, CompilerEnvironment enviroment, ParseInformation& info)\r\n   at ScopeClient.Scope.PrivateCompileSuppressException(Settings compSet, CompilerSwitches compilerSwitches, CompilerEnvironment environment, String outputXmlFileName, String scopeScriptFileName, Dictionary`2 parameters, Boolean isParseOnly, Boolean verbose)\r\n   at ScopeClient.ScopeStudio.ScopeStudioInterface.Compile(Dictionary`2 parameters, Int32 version)\r\n   at System.RuntimeMethodHandle.InvokeMethod(Object target, Object[] arguments, Signature sig, Boolean constructor)\r\n   at System.Reflection.RuntimeMethodInfo.UnsafeInvokeInternal(Object obj, Object[] parameters, Object[] arguments)\r\n   at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)\r\n   at System.RuntimeType.InvokeMember(String name, BindingFlags bindingFlags, Binder binder, Object target, Object[] providedArgs, ParameterModifier[] modifiers, CultureInfo culture, String[] namedParams)\r\n   at Microsoft.Cosmos.ScopeStudio.BusinessObjects.Common.CompilerProxy.DoInvork(String method, Object[] parameters, String outputXmlFileName)\r\n","helpLink":"","filePath":null,"lineNumber":25,"startOffset":704,"endOffset":707}]}