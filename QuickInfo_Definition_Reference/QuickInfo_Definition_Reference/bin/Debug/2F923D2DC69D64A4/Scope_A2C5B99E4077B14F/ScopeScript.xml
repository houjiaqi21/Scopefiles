<?xml version="1.0" encoding="utf-8"?>
<ScopeScript>
  <preScript><![CDATA[
USING Microsoft.Analytics.Interfaces;
USING System;
USING System.Collections.Generic;
USING System.Text;
USING System.Reflection;
USING System.IO;
USING System.Text.RegularExpressions;
USING System.Threading;
USING System.Runtime.Serialization;
USING System.Linq;
USING Microsoft.SCOPE.Types;
USING ScopeRuntime;
USING ScopeRuntime.Diagnostics;

REFERENCE @"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.5.2\System.Core.dll";
]]></preScript>
  <ScopeVertices>
    <ScopeVertex id="SV1_Extract_Split" ScopeScriptEndPoint="true">
      <input id="Extract_0" />
      <output id="SV1_Extract_Split_out0" schema="AdId:int,IId:int,Impression:int,IsClicked:int" />
      <output id="SV1_Extract_Split_out1" schema="AdId:int,IId:int,Impression:int" /><![CDATA[_var_100001_EXTRACT = EXTRACT AdId:int,IId:int,Impression:int,IsClicked:int FROM @"my/Inputs/AdsLog.txt" USING MyTSVExtractor();
]]></ScopeVertex>
    <ScopeVertex id="SV2_Process" ScopeScriptEndPoint="true">
      <input id="SV1_Extract_Split_out1" />
      <output id="SV2_Process_out0" schema="AdId:int,IId:int,Impression:int" scopeLabel="_var_100002_LSORT" /><![CDATA[_var_100002_LSORT = SELECT AdId, IId, Impression FROM _var_100001_EXTRACT ORDER BY IId;
]]></ScopeVertex>
    <ScopeVertex id="SV3_Extract_Split" ScopeScriptEndPoint="true">
      <input id="Extract_4" />
      <output id="SV3_Extract_Split_out0" schema="Query:string,IId1:int" />
      <output id="SV3_Extract_Split_out1" schema="IId:int,UId:int,Start:DateTime,Market:string,Query:string,DwellTime:int,Results:string,ClickedUrls:string" />
      <output id="SV3_Extract_Split_out2" schema="Market:string,Results:string" />
      <output id="SV3_Extract_Split_out3" schema="Market:string,DwellTimeDouble:double" />
      <output id="SV3_Extract_Split_out4" schema="IId:int,UId:int,Start:DateTime,Market:string,Query:string,DwellTime:int,Results:string,ClickedUrlsCount:string" /><![CDATA[_var_100003_EXTRACT = EXTRACT IId:int,UId:int,Start:DateTime,Market:string,Query:string,DwellTime:int,Results:string,ClickedUrls:string FROM @"my/Inputs/SearchLog.txt" USING ScopeRuntime.DefaultTextExtractor();
]]></ScopeVertex>
    <ScopeVertex id="SV4_Process" ScopeScriptEndPoint="true">
      <input id="SV3_Extract_Split_out0" />
      <output id="SV4_Process_out0" schema="Query:string,IId1:int" scopeLabel="_var_100004_LSORT" /><![CDATA[_var_100004_LSORT = SELECT Query, IId1 FROM _var_100003_EXTRACT ORDER BY IId1;
]]></ScopeVertex>
    <ScopeVertex id="SV5_Combine" ScopeScriptEndPoint="true">
      <input id="SV2_Process_out0" />
      <input id="SV4_Process_out0" />
      <output id="SV5_Combine_out0" schema="AdId:int,IId:int,Impression:int,Query:string" scopeLabel="" /><![CDATA[_var_100005_INTERNAL_COMBINE = SELECT AdId, IId, Impression, Query FROM _var_100002_LSORT AS AliasLeft INNER JOIN _var_100004_LSORT AS AliasRight ON AliasLeft.IId == AliasRight.IId1;
OUTPUT _var_100005_INTERNAL_COMBINE TO @"https://cosmos08.osdinfra.net/cosmos/sandbox/my/Outputs/Processorlog.txt" USING ScopeRuntime.DefaultTextOutputter();
]]></ScopeVertex>
    <ScopeVertex id="SV6_Process" ScopeScriptEndPoint="true">
      <input id="SV3_Extract_Split_out2" />
      <output id="SV6_Process_out0" schema="Market:string,Result:string" scopeLabel="" /><![CDATA[_var_100007_CROSSAPPLY = SELECT Market, SplitResult FROM _var_100003_EXTRACT CROSS APPLY MyHelper.Split(Results, ';') AS SplitResult;
_var_100008_TRANSFORM = SELECT Market AS Market, SplitResult AS Result FROM _var_100007_CROSSAPPLY;
OUTPUT _var_100008_TRANSFORM TO @"https://cosmos08.osdinfra.net/cosmos/sandbox/my/Outputs/rs2.txt" USING ScopeRuntime.DefaultTextOutputter();
]]></ScopeVertex>
    <ScopeVertex id="SV7_Process" ScopeScriptEndPoint="true">
      <input id="SV3_Extract_Split_out3" />
      <output id="SV7_Process_out0" schema="Market:string,TotalDwellTime:double" scopeLabel="" /><![CDATA[_var_100010_LSORT = SELECT Market, DwellTimeDouble FROM _var_100003_EXTRACT ORDER BY Market;
_var_100011_TRANSFORM = SELECT Market AS Market, DwellTimeDouble AS TotalDwellTime FROM _var_100010_LSORT;
_var_100012_GROUPBY = SELECT FIRST(Market) AS Market, MySum(TotalDwellTime) AS TotalDwellTime FROM _var_100011_TRANSFORM GROUP BY Market;
OUTPUT _var_100012_GROUPBY TO @"https://cosmos08.osdinfra.net/cosmos/sandbox/my/Outputs/rs3.txt" USING ScopeRuntime.DefaultTextOutputter();
]]></ScopeVertex>
  </ScopeVertices>
  <postScript><![CDATA[#CS

public static class MyHelper
{
    public static int ParseDuration(string s)
    {
        string[] tokens = s.Split(new char[] { ':' });
        int hours_in_sec = int.Parse(tokens[0]) * 60 * 60;
        int minutes_in_sec = int.Parse(tokens[1]) * 60;
        int seconds = int.Parse(tokens[2]);
        int total = hours_in_sec + minutes_in_sec + seconds;
        return total;
    }

    public static double SecondsToHours(int seconds)
    {
        double hours = seconds / (60.0 * 60.0);
        return hours;
    }

    public static string FOO(string s)
    {
        return s.ToUpper();
    }

    public static string[] Split(string s, char c)
    {
        return s.Split(new char[] { c });
    }

    public static string Join(char c, IEnumerable<string> tokens)
    {
        var sb = new System.Text.StringBuilder();
        int n = 0;
        foreach (var token in tokens)
        {
            if (n > 0)
            {
                sb.Append(c);
            }
            sb.Append(token);
            n++;
        }
        return sb.ToString();
    }

}
public class UrlList
{
    public List<string> Items;
    private static char[] sepchars = new char[] { ',' };

    public UrlList(string s)
    {
        this.Items = new List<string>(s.Split(sepchars));
    }

    public static UrlList Create(string s)
    {
        return new UrlList(s);
    }

    public string Serialize()
    {
        return String.Join(";", this.Items);
    }
}
public class MySum_Double : Aggregate1<double, double>
{
    double sum = 0;
    public override void Initialize()
    {
        sum = 0;
    }

    public override void Add(double y)
    {
        sum += y;
    }

    public override double Finalize()
    {
        return sum;
    }
}
public class MyAgg2_IntegerDouble : Aggregate2<int, double, string>
{
    System.Text.StringBuilder sb;
    public override void Initialize()
    {
        sb = new System.Text.StringBuilder();
    }

    public override void Add(int count, double value)
    {
        for (int i = 0; i < count; i++)
        {
            sb.Append(value.ToString());
        }
    }

    public override string Finalize()
    {
        return sb.ToString();
    }
}
public class MyTSVExtractor : Extractor
{
    public override Schema Produces(string[] requested_columns, string[] args)
    {
        return new Schema(requested_columns);
    }

    public override IEnumerable<Row> Extract(StreamReader reader, Row output_row, string[] args)
    {
        char delimiter = '\t';
        string line;
        while ((line = reader.ReadLine()) != null)
        {
            var tokens = line.Split(delimiter);
            for (int i = 0; i < tokens.Length; ++i)
            {
                output_row[i].UnsafeSet(tokens[i]);
            }
            yield return output_row;
        }
    }
}
public class MyCSVOutputter : Outputter
{
    public override void Output(RowSet input, StreamWriter writer, string[] args)
    {
        foreach (Row row in input.Rows)
        {
            int c = 0;
            for (int i = 0; i < row.Count; i++)
            {
                if (c > 0)
                {
                    writer.Write(",");
                }
                row[i].Serialize(writer);
                c++;
            }
            writer.WriteLine();
            writer.Flush();
        }
    }
}
public class MyCombiner : Combiner
{
    private RowList _rowList = new RowList();

    public override Schema Produces(string[] requestedColumns, string[] args, Schema leftSchema, string leftTable, Schema rightSchema, string rightTable)
    {
        var tokens = new List<string>();

        foreach (var col in leftSchema.Columns)
        {
            string prefix = rightSchema.Contains(col.Name) ? leftTable : "";
            tokens.Add(string.Format("{0}{1}:{2}", prefix, col.Name, col.CLRType));
        }
        foreach (var col in rightSchema.Columns)
        {
            string prefix = leftSchema.Contains(col.Name) ? rightTable : "";
            tokens.Add(string.Format("{0}{1}:{2}", prefix, col.Name, col.CLRType));
        }
        var schemastring = String.Join(";", tokens);
        return new Schema(schemastring);
    }

    public override IEnumerable<Row> Combine(RowSet left, RowSet right, Row outputRow, string[] args)
    {
        _rowList.Load(right); //  Load the right RowSet into memory
        foreach (Row leftRow in left.Rows)
        {
            leftRow.CopyTo(outputRow); // Copy the data from the leftRow to the output

            //  Copy the data from the leftRow to the output
            foreach (Row rightRow in _rowList.Rows)
            {
                for (int i = 0; i < rightRow.Count; ++i)
                {
                    rightRow[i].CopyTo(outputRow[i + leftRow.Count]);
                }
                yield return outputRow;
            }
        }
    }


}
public class ImpressionProcessor : Processor
{
    /// <summary>
    /// 
    /// </summary>
    /// <param name="columns"></param>
    /// <param name="args"></param>
    /// <param name="input"></param>
    /// <returns></returns>
    public override Schema Produces(string[] columns, string[] args, Schema input)
    {
        return input.Clone();
    }
    /// <summary>
    ///
    /// </summary>
    /// <param name="input"></param>
    /// <param name="output"></param>
    /// <param name="args"></param>
    /// <returns></returns>    
    public override IEnumerable<Row> Process(RowSet input, Row output, string[] args)
    {

        foreach (Row row in input.Rows)
        {
            row.CopyTo(output);
            output[2].Set(10000000 / (row[2].Integer));
            if (row[2].Integer < 10000000)
            {
                DebugStream.WriteLine(String.Format("Impression = {0}", row[2].Integer));
            }
            //output[2].Set(10000000 / (row[2].Integer / 10000000));
            yield return output;
        }
    }
}
#ENDCS]]></postScript>
</ScopeScript>