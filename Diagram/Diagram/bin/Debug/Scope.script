REFERENCE @"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.5.2\System.Core.dll";
//Script GUID:2c0dc1c5-82a8-4840-ab5b-ff8d779577b9
//Used for tracking history

adslog =
    EXTRACT AdId : int,
            IId : int,
            Impression : int,
            IsClicked : int
    FROM @"/my/AdsLog.txt"
    USING DefaultTextExtractor();

searchlog =
    EXTRACT IId : int,
            UId : int,
            Start : DateTime,
            Market : string,
            Query : string,
            DwellTime : int,
            Results : string,
            ClickedUrls : string
    FROM @"/my/SearchLog.txt"
    USING DefaultTextExtractor();

SELECT TOP 100 adslog.AdId AS AdId,
               adslog.IId AS IId,
               adslog.Impression AS Impression,
               searchlog.Query AS Query,
               searchlog.DwellTime AS DwellTime
FROM adslog
     INNER JOIN
         searchlog
     ON adslog.IId == searchlog.IId
WHERE (searchlog.DwellTime >= 2 * 60 AND searchlog.DwellTime <= 5 * 60) OR (searchlog.Market == "en-gb")
ORDER BY DwellTime DESC;

PROCESS
PRODUCE *
USING ImpressionProcessor;

OUTPUT
TO @"/my/Impressions.txt";



//debugstream =
//    EXTRACT VertexName : string,
//            Version : int?,
//            VertexGuid : string,
//            Truncated : bool?,
//            GroupId : string,
//            ThreadId : string?,
//            OccurrenceTime : DateTime?,
//            Content : string?
//    FROM "/my/DebugStream.txt"
//    USING DefaultDebugStreamExtractor;
//OUTPUT
//TO SSTREAM "my/mydebugstream.ss"; 
#CS
using Microsoft.SCOPE.Types;
using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using ScopeRuntime;
using ScopeRuntime.Diagnostics;


/// <summary>
/// 
/// </summary>
public class ImpressionProcessor : Processor
{
    /// <summary>
    /// 
    /// </summary>
    /// <param name="columns"></param>
    /// <param name="args"></param>
    /// <param name="input"></param>
    /// <returns></returns>
    public override Schema Produces(string[] columns, string[] args, Schema input)
    {
        return input.Clone();
    }
    /// <summary>
    ///
    /// </summary>
    /// <param name="input"></param>
    /// <param name="output"></param>
    /// <param name="args"></param>
    /// <returns></returns>    
    public override IEnumerable<Row> Process(RowSet input, Row output, string[] args)
    {

        foreach (Row row in input.Rows)
        {
            row.CopyTo(output);
            output[2].Set(10000000 / (row[2].Integer));
            if (row[2].Integer < 10000000)
            {
                DebugStream.WriteLine(String.Format("Impression = {0}", row[2].Integer));
            }
            //output[2].Set(10000000 / (row[2].Integer / 10000000));
            yield return output;
        }
    }
}

#ENDCS

// Generated by ScopeStudio, version 2.5.1000.2
